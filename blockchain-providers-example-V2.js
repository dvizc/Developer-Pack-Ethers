import { ethers } from "ethers";
const { getDefaultProvider, JsonRpcProvider } = ethers;

async function main() {
    try {
        console.log("üîó Iniciando conexiones a diferentes redes blockchain...\n");
        
        // ========================================
        // PROVEEDORES POR DEFECTO (DefaultProvider)
        // ========================================
        
        // Conectar usando TU API key de Alchemy (sin l√≠mites de claves compartidas)
        console.log("üì° Conectando a Ethereum Mainnet con TU Alchemy API...");
        // Connect to the Ethereum network
        //-Se inicializa el nodo rpc
        //-Poner lo de alquemist
        const providerMainnet = new JsonRpcProvider("https://eth-mainnet.g.alchemy.com/v2/JvcF9wru8tdPg0U2v0V4Z");
        //const providerMainnet = new JsonRpcProvider('https://eth-mainnet.g.alchemy.com/v2/Na9O_bKcUSD9oml_Pske6');
        
        //-Poner lo de alquemist
        // Conectar a Sepolia usando TU API key tambi√©n
        console.log("üß™ Conectando a Sepolia Testnet con TU Alchemy API...");
        const providerSepolia = new JsonRpcProvider('https://eth-sepolia.g.alchemy.com/v2/JvcF9wru8tdPg0U2v0V4Z');
        
        // Para Polygon, usaremos solo Mainnet por ahora (Alchemy no tiene Polygon gratis)
        console.log("üü£ Saltando Polygon por ahora (Alchemy requiere plan pago para Polygon)...");

        // ========================================
        // OBTENER N√öMEROS DE BLOQUE ACTUALES
        // ========================================
        
        console.log("\nüìä Obteniendo n√∫meros de bloque actuales...\n");
        
        // El n√∫mero de bloque indica cu√°ntos bloques se han minado
        // Un n√∫mero m√°s alto = blockchain m√°s activa
        const blockNumberMainnet = await providerMainnet.getBlockNumber();
        const blockNumberSepolia = await providerSepolia.getBlockNumber();

        // Mostrar resultados con formato
        console.log(`üåê Ethereum Mainnet - Bloque actual: ${blockNumberMainnet.toLocaleString()}`);
        console.log(`üß™ Sepolia Testnet - Bloque actual: ${blockNumberSepolia.toLocaleString()}`);
        console.log(`üü£ Polygon Network - Saltado (no incluido en plan gratuito de Alchemy)`);
        
        // ========================================
        // PROVEEDORES ESPEC√çFICOS (JsonRpcProvider)
        // ========================================
        
        console.log("\nüîß Probando conexiones espec√≠ficas...\n");
        
        // Red local (para desarrollo)
        // Descomenta la siguiente l√≠nea si tienes un nodo local corriendo
        // const providerLocal = new JsonRpcProvider('http://localhost:8545');
        console.log("üíª Red local: Comentada (descomenta si tienes Ganache/Hardhat ejecut√°ndose)");
        
        // Conexi√≥n directa a Infura
        // NOTA: Necesitas reemplazar 'your-infura-project-id' con tu ID real
        console.log("üåç Probando conexi√≥n con Infura...");
        try {
            const providerInfura = new JsonRpcProvider('https://mainnet.infura.io/v3/your-infura-project-id');
            // Esta l√≠nea fallar√° sin un Project ID v√°lido
            // const blockNumberMainnetInfura = await providerInfura.getBlockNumber();
            // console.log(`üåç Infura Mainnet - Bloque actual: ${blockNumberMainnetInfura.toLocaleString()}`);
            console.log("‚ö†Ô∏è  Infura: Necesitas un Project ID v√°lido para conectar");
        } catch (error) {
            console.log("‚ùå Infura: Error de conexi√≥n (Project ID requerido)");
        }

        // Conexi√≥n directa a Alchemy con tu API Key
        console.log("‚öóÔ∏è  Probando conexi√≥n con Alchemy...");
        try {
            const providerAlchemy = new JsonRpcProvider('https://eth-mainnet.g.alchemy.com/v2/Na9O_bKcUSD9oml_Pske6');
            const blockNumberMainnetAlchemy = await providerAlchemy.getBlockNumber();
            console.log(`‚öóÔ∏è  Alchemy Mainnet - Bloque actual: ${blockNumberMainnetAlchemy.toLocaleString()}`);
            console.log("‚úÖ Alchemy: Conectado exitosamente con tu API Key!");
        } catch (error) {
            console.log("‚ùå Alchemy: Error de conexi√≥n -", error.message);
        }

        // ========================================
        // INFORMACI√ìN ADICIONAL
        // ========================================
        
        console.log("\nüìö Informaci√≥n adicional:");
        console.log("‚Ä¢ getDefaultProvider usa m√∫ltiples servicios autom√°ticamente");
        console.log("‚Ä¢ JsonRpcProvider se conecta a un endpoint espec√≠fico");
        console.log("‚Ä¢ Los n√∫meros de bloque cambian constantemente (cada ~12-15 seg en Ethereum)");
        console.log("‚Ä¢ Las testnets son gratis pero los tokens no tienen valor real");
        
        console.log("\n‚úÖ Demostraci√≥n completada exitosamente!");

    } catch (error) {
        console.error("‚ùå Error durante la ejecuci√≥n:", error.message);
        console.log("\nüîß Posibles soluciones:");
        console.log("‚Ä¢ Verifica tu conexi√≥n a internet");
        console.log("‚Ä¢ Aseg√∫rate de tener ethers.js instalado: npm install ethers");
        console.log("‚Ä¢ Para servicios espec√≠ficos, necesitas claves API v√°lidas");
    }
}

// ========================================
// EJECUTAR EL PROGRAMA
// ========================================

console.log("üöÄ Iniciando demostraci√≥n de proveedores blockchain...\n");
main();